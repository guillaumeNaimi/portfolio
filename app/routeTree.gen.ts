/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppLayoutDesktopOnlyRouteImport } from './routes/app/_layout-desktop-only'
import { Route as AppLayoutRouteImport } from './routes/app/_layout'
import { Route as AppLayoutIndexRouteImport } from './routes/app/_layout/index'
import { Route as AppLayoutCvIndexRouteImport } from './routes/app/_layout/cv.index'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api/rpc.$'

const rootServerRouteImport = createServerRootRoute()

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppLayoutDesktopOnlyRoute = AppLayoutDesktopOnlyRouteImport.update({
  id: '/_layout-desktop-only',
  getParentRoute: () => AppRoute,
} as any)
const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AppRoute,
} as any)
const AppLayoutIndexRoute = AppLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppLayoutCvIndexRoute = AppLayoutCvIndexRouteImport.update({
  id: '/cv/',
  path: '/cv/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppLayoutDesktopOnlyRoute
  '/app/': typeof AppLayoutIndexRoute
  '/app/cv': typeof AppLayoutCvIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppLayoutIndexRoute
  '/app/cv': typeof AppLayoutCvIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/_layout': typeof AppLayoutRouteWithChildren
  '/app/_layout-desktop-only': typeof AppLayoutDesktopOnlyRoute
  '/app/_layout/': typeof AppLayoutIndexRoute
  '/app/_layout/cv/': typeof AppLayoutCvIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app' | '/app/' | '/app/cv'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/app/cv'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/_layout'
    | '/app/_layout-desktop-only'
    | '/app/_layout/'
    | '/app/_layout/cv/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/rpc/$'
  id: '__root__' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/_layout-desktop-only': {
      id: '/app/_layout-desktop-only'
      path: ''
      fullPath: '/app'
      preLoaderRoute: typeof AppLayoutDesktopOnlyRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/_layout': {
      id: '/app/_layout'
      path: ''
      fullPath: '/app'
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/_layout/': {
      id: '/app/_layout/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppLayoutIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/app/_layout/cv/': {
      id: '/app/_layout/cv/'
      path: '/cv'
      fullPath: '/app/cv'
      preLoaderRoute: typeof AppLayoutCvIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppLayoutRouteChildren {
  AppLayoutIndexRoute: typeof AppLayoutIndexRoute
  AppLayoutCvIndexRoute: typeof AppLayoutCvIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutIndexRoute: AppLayoutIndexRoute,
  AppLayoutCvIndexRoute: AppLayoutCvIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AppRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AppLayoutDesktopOnlyRoute: typeof AppLayoutDesktopOnlyRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AppLayoutDesktopOnlyRoute: AppLayoutDesktopOnlyRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
