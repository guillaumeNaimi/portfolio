// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CV Models
enum TechnologyCategory {
  frontend
  backend
  devops
  design
  other
}

enum ExperienceType {
  full_time
  part_time
  contract
  freelance
}

model Technology {
  id       String             @id @default(cuid())
  name     String
  icon     String?
  color    String?
  category TechnologyCategory
  skills   Skill[]
  experiences ExperienceTechnology[]
  projects ProjectTechnology[]

  @@map("technology")
}

model Skill {
  id         String     @id @default(cuid())
  level      Int        @default(0)
  technology Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  technologyId String

  @@unique([technologyId])
  @@map("skill")
}

model Experience {
  id            String         @id @default(cuid())
  company       String
  position      String
  positionEn    String?
  positionFr    String?
  startDate     DateTime
  endDate       DateTime?
  description   String
  descriptionEn String?
  descriptionFr String?
  achievements  String[]       // Array of strings
  achievementsEn String[]      // Array of strings in English
  achievementsFr String[]      // Array of strings in French
  location      String?
  locationEn    String?
  locationFr    String?
  type          ExperienceType
  image         String?
  primaryColor  String?
  secondaryColor String?
  technologies  ExperienceTechnology[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("experience")
}

model ExperienceTechnology {
  experienceId String
  technologyId String
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([experienceId, technologyId])
  @@map("experience_technology")
}

model Education {
  id          String   @id @default(cuid())
  institution String
  institutionEn String?
  institutionFr String?
  degree      String
  degreeEn    String?
  degreeFr    String?
  field       String
  fieldEn     String?
  fieldFr     String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  descriptionEn String?
  descriptionFr String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("education")
}

model Project {
  id          String           @id @default(cuid())
  title       String
  titleEn     String?
  titleFr     String?
  description String
  descriptionEn String?
  descriptionFr String?
  image       String?
  githubUrl   String?
  liveUrl     String?
  featured    Boolean          @default(false)
  technologies ProjectTechnology[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("project")
}

model ProjectTechnology {
  projectId   String
  technologyId String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology  Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([projectId, technologyId])
  @@map("project_technology")
}

